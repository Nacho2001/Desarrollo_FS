27/07/2023
Servicio Web: Software que permite intercambios de datos entre aplicaciones dentro de una red

interoperabilidad: software que colaboran para llegar a un objetivo o capacidad de los software para intercambiar datos

Ej: Se puede tener multiples aplicaciones, cada una con un lenguaje de programación diferente pero que pueden funcionar en 
conjunto

Tipos de web service:

SOAP: Se basa en el lenguaje XML, y establece la comunicacion bajo estandares ya definidos.
XML ya nose utiliza tanto porque es más complejo y utiliza más caracteres que JSON, sin embargo, es más potente 
porque trae ciertas funcionalidades que JSON no tiene.

RESTFUL: No esta sujeto a estándares definidos y puede trabajar no solamente con XML, sino tambien con JSON, entre otros.

JSON utiliza menos recursos que XML, porque no requiere tanto procesamiento para leer api, por lo tanto ofrece un mayor 
rendimiento.

Token: Se genera del lado del backend y es guardado temporalmente por el cliente. Es una forma de inicio de sesión.

Metodos / Verbos:

GET: Consulta u obtener informacion
POST: Crear o insertar
PUT: Actualizar datos
DELETE: Borrar datos

Ejemplos de enlaces: 

get:: http://domain.com/users
post:: http://domain.com/users
put:: http://domain.com/users
delete:: http://domain.com/users

Parámetros URL:
get: http://domain.com/users/{userID}/profile

Query params:
get: http://domain.com/users/?id=1 // Trae a el usuario con el ID = 1

----------
Error cannot get / significa que no tiene ninguna respuesta de parte del servidor, aunque si haya logrado la conexion
Con express en un proyecto, se resuelven las rutas no es necesario crearlas de nuevo.

El this. sirve para hacer referencia un atributo de un objeto creado

Recordatorio:
Instalar nojejs y npm,
clonar el repositorio

1. Crear un proyecto
npm init -y

2. Instalar express
npm i express

3. Verificar la version en el package.json

4. Crear carpeta models

5. Dentro de models crear el archivo server.js

6. Escribir server.js con el siguiente contenido:

const express = require('express');

class Server{
	constructor(){
		this.app = express(); // Este app, será el servidor que estará esperando peticiones
	}
	routes(){
		this.app.use('/', require('../routes/users'));
	}
	listen(){ // Inicia el servidor en el puerto 3000 y mostrará un mensaje por pantalla
		this.app.listen(3000, () => {
			console.log('Servidor corriendo en el puerto 3000');
		})
	}
}

module.exports = Server();

7. Crear archivo app.js:

const Server = require('./models/server');
const server = new Server();
server.listen();

8. Crear nueva carpeta llamada "routes"

9. Dentro de routes, crear archivo users.js

10. Completar users.js con:
// Crea las rutas a las que dirigira al usuario cuando se conecte
const {Router} = require('express');

const router = Router();

// Responde a la peticion get del usuario
router.get('/', (req,res) => { // req = consulta o todo lo que venga y res = es la respuesta que voy a devolver
	res.send("Hola mundo cruel!!");
})

module.exports = router